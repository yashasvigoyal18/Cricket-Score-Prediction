# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yjXdxOB1HlIQYIrMGaeFUQ9EoczMKukd
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error
import numpy as np
import matplotlib.pyplot as plt

# Load the dataset
file_path = '/content/t20_Batting_Card.csv'
data = pd.read_csv(file_path)

# Preprocessing
data.fillna(0, inplace=True)

# Aggregate data
data_agg = data.groupby(['Match ID', 'innings', 'team']).agg({
    'runs': 'sum', 'balls': 'sum', 'fours': 'sum', 'sixes': 'sum'
}).reset_index()

data_agg.rename(columns={
    'runs': 'total_runs', 'balls': 'total_balls',
    'fours': 'total_fours', 'sixes': 'total_sixes'
}, inplace=True)

data_agg['team'] = data_agg['team'].astype('category').cat.codes

# Feature selection
X = data_agg[['innings', 'team', 'total_balls', 'total_fours', 'total_sixes']]
y = data_agg['total_runs']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize models
models = {
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "Lasso Regression (L1)": Lasso(alpha=0.1),
    "Gradient Boosting": GradientBoostingRegressor(n_estimators=100, random_state=42)
}

# Train and evaluate models
results = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    predictions = model.predict(X_test)
    mse = mean_squared_error(y_test, predictions)
    rmse = np.sqrt(mse)
    results[name] = rmse
    print(f"{name}: RMSE = {rmse:.2f}")

# Identify best model
best_model_name = min(results, key=results.get)
best_model = models[best_model_name]
print(f"\nBest Performing Model: {best_model_name}")

# User input for prediction
print("\nEnter details for prediction:")
innings = int(input("Enter the innings (1 or 2): "))
team = int(input("Enter the team code (encoded value): "))
total_balls = int(input("Enter the total balls faced so far: "))
total_fours = int(input("Enter the total number of fours hit so far: "))
total_sixes = int(input("Enter the total number of sixes hit so far: "))

if total_balls == 0:
    print("Invalid input: Total balls faced must be greater than 0.")
    exit()

scaling_factor = 120 / total_balls
predicted_fours = total_fours * scaling_factor
predicted_sixes = total_sixes * scaling_factor
predicted_balls = 120

user_input = pd.DataFrame({
    'innings': [innings], 'team': [team],
    'total_balls': [predicted_balls], 'total_fours': [predicted_fours], 'total_sixes': [predicted_sixes]
})

user_prediction = best_model.predict(user_input)
print(f"\nPredicted Total Score for 120 Balls using {best_model_name}: {user_prediction[0]:.2f}")

# Generate predicted score progression for 120 balls
balls_range = np.arange(1, 121)
scaled_fours = (total_fours / total_balls) * balls_range
scaled_sixes = (total_sixes / total_balls) * balls_range

predicted_scores = []
for balls in balls_range:
    input_df = pd.DataFrame({
        'innings': [innings], 'team': [team],
        'total_balls': [balls], 'total_fours': [scaled_fours[int(balls) - 1]],
        'total_sixes': [scaled_sixes[int(balls) - 1]]
    })
    predicted_scores.append(best_model.predict(input_df)[0])

# Plot results
plt.figure(figsize=(10, 5))
plt.plot(balls_range, predicted_scores, label=f"Predicted Score ({best_model_name})", color="blue")
plt.xlabel("Balls Faced")
plt.ylabel("Predicted Total Score")
plt.title("Predicted Score Progression Over 120 Balls")
plt.legend()
plt.grid()
plt.show()